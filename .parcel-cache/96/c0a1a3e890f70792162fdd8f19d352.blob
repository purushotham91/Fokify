'use strict';
import   "7909776ab38fb4436b567f06779ebd50:../modules/es.regexp.exec";
// TODO: Remove from `core-js@4` since it's moved to entry points
$7909776ab38fb4436b567f06779ebd50$import$5bd4cb18654b6ae7;
import   "7909776ab38fb4436b567f06779ebd50:../internals/redefine";
import   "7909776ab38fb4436b567f06779ebd50:../internals/regexp-exec";
import   "7909776ab38fb4436b567f06779ebd50:../internals/fails";
import   "7909776ab38fb4436b567f06779ebd50:../internals/well-known-symbol";
import   "7909776ab38fb4436b567f06779ebd50:../internals/create-non-enumerable-property";
var $7909776ab38fb4436b567f06779ebd50$var$SPECIES = $7909776ab38fb4436b567f06779ebd50$import$88242bc6a9673a44('species');
var $7909776ab38fb4436b567f06779ebd50$var$RegExpPrototype = RegExp.prototype;
$7909776ab38fb4436b567f06779ebd50$exports = function(KEY, exec, FORCED, SHAM) {
    var SYMBOL = $7909776ab38fb4436b567f06779ebd50$import$88242bc6a9673a44(KEY);
    var DELEGATES_TO_SYMBOL = !$7909776ab38fb4436b567f06779ebd50$import$9936d02511e757dc(function() {
        // String methods call symbol-named RegEp methods
        var O = {
        };
        O[SYMBOL] = function() {
            return 7;
        };
        return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !$7909776ab38fb4436b567f06779ebd50$import$9936d02511e757dc(function() {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;
        if (KEY === 'split') {
            // We can't use real regex here since it causes deoptimization
            // and serious performance degradation in V8
            // https://github.com/zloirock/core-js/issues/306
            re = {
            };
            // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.
            re.constructor = {
            };
            re.constructor[$7909776ab38fb4436b567f06779ebd50$var$SPECIES] = function() {
                return re;
            };
            re.flags = '';
            re[SYMBOL] = /./[SYMBOL];
        }
        re.exec = function() {
            execCalled = true;
            return null;
        };
        re[SYMBOL]('');
        return !execCalled;
    });
    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
        var nativeRegExpMethod = /./[SYMBOL];
        var methods = exec(SYMBOL, ''[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
            var $exec = regexp.exec;
            if ($exec === $7909776ab38fb4436b567f06779ebd50$import$4db0b3069deec4fe || $exec === $7909776ab38fb4436b567f06779ebd50$var$RegExpPrototype.exec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                    done: true,
                    value: nativeRegExpMethod.call(regexp, str, arg2)
                };
                return {
                    done: true,
                    value: nativeMethod.call(str, regexp, arg2)
                };
            }
            return {
                done: false
            };
        });
        $7909776ab38fb4436b567f06779ebd50$import$715a1a2c44d923e3(String.prototype, KEY, methods[0]);
        $7909776ab38fb4436b567f06779ebd50$import$715a1a2c44d923e3($7909776ab38fb4436b567f06779ebd50$var$RegExpPrototype, SYMBOL, methods[1]);
    }
    if (SHAM) $7909776ab38fb4436b567f06779ebd50$import$ea4d2ea16a516be3($7909776ab38fb4436b567f06779ebd50$var$RegExpPrototype[SYMBOL], 'sham', true);
};
